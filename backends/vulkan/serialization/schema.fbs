// Copyright (c) Meta Platforms, Inc. and affiliates.

namespace vkgraph;

// Update after any BC breaking changes
file_identifier "VK00";

enum VkDatatype : short {
  /// IEEE754 single-precision floating-point.
  vk_datatype_fp32 = 0,
}

// Abstraction to represent a region of bytes in a raw data buffer. Useful for referencing raw data serialized outside of the flatbuffer.
table VkBytes {
  offset: ulong;
  length: ulong;
}

table VkTensor {
  // type of the tensor elements.
  datatype:VkDatatype;
  // Array of shape dimensions
  dims:[uint];
  // Index to the program's constant buffer table, negative value indicates non constant
  constant_buffer_idx:int;
  // Indicates which shared memory object this tensor uses; negative value indicates the tensor does not share memory
  mem_obj_id: int;
}

table VkValue {
  value:VkTensor;
}

enum VkArithmeticOpType : short {
  vk_arithmetic_op_type_add = 0,
  vk_arithmetic_op_type_sub = 1,
  vk_arithmetic_op_type_mul = 2,
  vk_arithmetic_op_type_div = 3,
  vk_arithmetic_op_type_floor_div = 4,
  vk_arithmetic_op_type_pow = 5,
}

table VkArithmeticNode {
  input1_id:uint;
  input2_id:uint;
  output_id:uint;
  op_type:VkArithmeticOpType;
  flags:uint;
}

table VkNode {
  node:VkArithmeticNode;
  debug_handle:uint;
}

table VkGraph {
  // Schema version.
  version:string;
  chain:[VkNode];
  values:[VkValue];

  // Ids of external inputs
  input_ids:[uint];

  // Ids of external outputs
  output_ids:[uint];

  // Tables of constant data, used for constant Values (e.g.
  // data field of weight tensors). Each constant is assigned an index into the table
  // which are each individually aligned. 0 index is reserved to be pointed to by non-constant
  // Tensors
  constants:[VkBytes];
  shaders:[VkBytes];
}

root_type VkGraph;
